When reading from Github, press button "Raw" to get line-wrapping.
------------------------------------------------------------------

Welcome to help for CodeTwig

CodeTwig is terminal-program to view source-code and to show procedures as usage-trees or used-by-trees.
Currently only meant for Nim.

All commands follow a certain structure and style:
- Long-style: ctwig projects/someproject.pro --command:somecommand --extrakey1:somevalue --extrakey2:othervalue
- Short-style: ctwig projects/someproject.pro -c:s -k:v -o:x

Currently all commands require a project-definition-path, except for help:
ctwig -h or ctwig --help

As option-separator one can use ':', '=' or none (for short options) and space (for long options)

Below I will list the commands with possible (extra) options in the logical order of use.
All commands are invoked as:
-c or --command
The command-key needs as values the actual commands.



ALL COMMANDS

-c:a or --command:add_files
no options

Full example:
ctwig projects/yourproject.pro -c:a

After you have copied the project-template, renamed it and adjusted the path to the source-files, you can run above command. All it does for now is adding the names of the source-files (.nim) from the source-path to project-def-file (yourproject.pro).


-c:d or --command:declarations
no options

Full example:
ctwig projects/yourproject.pro -c:d

Running this command will create a list of declarations. Declarations are the various procs, template, macros and functions. The file is not very readable, but will be used to create addtional views. Also it is parsed to generate the proc-trees on the fly. (see later). The list contains:
- declarations (like procs) for all source-files
- declarations that are used in above declarations (these are appended to above line)


-c:v or --command:views
no options

Full example:
ctwig projects/yourproject.pro -c:v

Running this command will create some views of the source-code. Currently two views are available, basic view with one level or two levels. The first one shows the source-files and the declarations only (usually mostly procs), and the second shows the usages of each declaration (used procs).


-c:t or --command:tree
options:
* direction
-r:u or --direction:usage
-r:b or --direction:used-by
* depth
-d:3 --depth:3

Full examples:
ctwig projects/yourproject.pro -c:t -r:b -d:4
ctwig projects/yourproject.pro -c:t -r:u -d:2

Seps can be ommitted:
ctwig projects/yourproject.pro -ct -ru -d2

Lastly above command starts with a box in which a substring can be entered to search for a declaration. Then  a list of declarations is displayed which have the substring in them. If the entered substring matches only one declaration, a tree is shown based on the parameters direction and depth. The direction usage refers to the calls to other procs that are made in the proc, where used-by stands for all the procs that are using the declaration (so the reverse process). The depths stands for the number of levels that are shown.



FUTURE FEATURES

Both in the views and in the tree-function the following will be retrievable:
- procedural arguments
- initial comments




